KCPSM3 Assembler log file for program 'square.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
06Jun2012-12:16:58

 Addr Code

 000                        ;================================================================================
 000                        ;Ciclo principal
 000                        ;================================================================================
 000               forever: 
 000  30023                 CALL read_switches[023]
 001  30004                 CALL hypot2[004]
 002  3002F                 CALL write_leds[02F]
 003  34000                 JUMP forever[000]
 004                        ;================================================================================
 004                        ;Funcion: hypot2
 004                        ;Entrada:
 004                        ; s0 : a
 004                        ; s1 : b
 004                        ;Salida:
 004                        ; s2 : a*a + b*b
 004                        ;================================================================================
 004                hypot2: 
 004  0F220                 XOR s2, s2
 005  01300                 LOAD s3, s0
 006  01400                 LOAD s4, s0
 007  3000E                 CALL hard_mult[00E]
 008  19250                 ADD s2, s5
 009  01310                 LOAD s3, s1
 00A  01410                 LOAD s4, s1
 00B  30019                 CALL mult[019]
 00C  19250                 ADD s2, s5
 00D  2A000                 RETURN
 00E                        ;================================================================================
 00E                        ;Funcion: hard_mult
 00E                        ;Entrada
 00E                        ; s3 : a, 4 bits
 00E                        ; s4 : b, 4 bits
 00E                        ;Salida:
 00E                        ; s5 : a*b, 8 bits
 00E                        ;Detalles: Usa un multiplicador externo, los operandos se escriben al puerto.
 00E                        ;Clobber: Se sobreescribe el registro s7 al hacer I/O
 00E                        ;================================================================================
 00E                        CONSTANT IN_MULT, 02
 00E                        CONSTANT OUT_OPERS, 03
 00E             hard_mult: 
 00E  0F770                 XOR s7, s7
 00F  0D740                 OR s7, s4
 010  20706                 SL0 s7
 011  20706                 SL0 s7
 012  20706                 SL0 s7
 013  20706                 SL0 s7
 014  0D730                 OR s7, s3
 015  2C703                 OUTPUT s7, OUT_OPERS[03]
 016  0B770                 AND s7, s7               ;NOP
 017  04502                 INPUT s5, IN_MULT[02]
 018  2A000                 RETURN
 019                        ;================================================================================
 019                        ;Funcion: mult
 019                        ;Entrada
 019                        ; s3 : a, 4 bits
 019                        ; s4 : b, 4 bits
 019                        ;Salida:
 019                        ; s5 : a*b, 8 bits
 019                        ;En C:
 019                        ; int mult(int a, int b){
 019                        ;  int res = 0;
 019                        ;  while(b != 0){
 019                        ;   if(b & 1){
 019                        ;    res += a;
 019                        ;   }
 019                        ;   a = a << 1;
 019                        ;   b = b >> 1;
 019                        ;  }
 019                        ;  return res;
 019                        ; }
 019                        ;================================================================================
 019                  mult: 
 019  0F550                 XOR s5, s5
 01A             mult_loop: 
 01A  13440                 TEST s4, s4
 01B  2B000                 RETURN Z
 01C  12401                 TEST s4, 01
 01D  3501F                 JUMP Z, mult_update[01F]
 01E  19530                 ADD s5, s3
 01F           mult_update: 
 01F  20306                 SL0 s3
 020  2040E                 SR0 s4
 021  3401A                 JUMP mult_loop[01A]
 022  2A000                 RETURN
 023                        ;================================================================================
 023                        ;Funcion: read_switches
 023                        ;Entrada: Lee del puerto de entrada los dos numeros pasados.
 023                        ;Salida:
 023                        ; s0: Primer operando. 4 bits.
 023                        ; s1: Segundo operando. 4 bits.
 023                        ;Clobber:
 023                        ; En la lectura se sobrescribe el registro s7
 023                        ;================================================================================
 023                        CONSTANT REG_HIGH, F0
 023                        CONSTANT REG_LOW, 0F
 023                        CONSTANT IN_SW, 01
 023                        CONSTANT OUT_RES, 04
 023         read_switches: 
 023  04701                 INPUT s7, IN_SW[01]
 024  0F000                 XOR s0, s0
 025  0F110                 XOR s1, s1
 026  01070                 LOAD s0, s7
 027  0A00F                 AND s0, REG_LOW[0F]
 028  01170                 LOAD s1, s7
 029  0A1F0                 AND s1, REG_HIGH[F0]
 02A                        ;Mover la parte superior a la baja
 02A                        ;No me quedo otra que shiftear 4 veces
 02A  2010E                 SR0 s1
 02B  2010E                 SR0 s1
 02C  2010E                 SR0 s1
 02D  2010E                 SR0 s1
 02E  2A000                 RETURN
 02F                        ;================================================================================
 02F                        ;Funcion: write_leds
 02F                        ;Entrada:
 02F                        ; s2: El resultado de la cuenta
 02F                        ;Salida: Escribe al puerto de salida el resultado.
 02F                        ;================================================================================
 02F            write_leds: 
 02F  2C204                 OUTPUT s2, OUT_RES[04]
 030  2A000                 RETURN
