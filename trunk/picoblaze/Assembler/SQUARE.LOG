KCPSM3 Assembler log file for program 'square.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
30May2012-12:51:47

 Addr Code

 000                        ;================================================================================
 000                        ;Ciclo principal
 000                        ;================================================================================
 000               forever: 
 000  30018                 CALL read_switches[018]
 001  30004                 CALL hypot2[004]
 002  30024                 CALL write_leds[024]
 003  34000                 JUMP forever[000]
 004                        ;================================================================================
 004                        ;Funcion: hypot2
 004                        ;Entrada:
 004                        ; s0 : a
 004                        ; s1 : b
 004                        ;Salida:
 004                        ; s2 : a*a + b*b
 004                        ;================================================================================
 004                hypot2: 
 004  0F220                 XOR s2, s2
 005  01300                 LOAD s3, s0
 006  01400                 LOAD s4, s0
 007  3000E                 CALL mult[00E]
 008  19250                 ADD s2, s5
 009  01310                 LOAD s3, s1
 00A  01410                 LOAD s4, s1
 00B  3000E                 CALL mult[00E]
 00C  19250                 ADD s2, s5
 00D  2A000                 RETURN
 00E                        ;================================================================================
 00E                        ;Funcion: mult
 00E                        ;Entrada
 00E                        ; s3 : a, 4 bits
 00E                        ; s4 : b, 4 bits
 00E                        ;Salida:
 00E                        ; s5 : a*b, 8 bits
 00E                        ;En C:
 00E                        ; int mult(int a, int b){
 00E                        ;  int res = 0;
 00E                        ;  while(b != 0){
 00E                        ;   if(b & 1){
 00E                        ;    res += a;
 00E                        ;   }
 00E                        ;   a = a << 1;
 00E                        ;   b = b >> 1;
 00E                        ;  }
 00E                        ;  return res;
 00E                        ; }
 00E                        ;================================================================================
 00E                  mult: 
 00E  0F550                 XOR s5, s5
 00F             mult_loop: 
 00F  13440                 TEST s4, s4
 010  2B000                 RETURN Z
 011  12401                 TEST s4, 01
 012  35014                 JUMP Z, mult_update[014]
 013  19530                 ADD s5, s3
 014           mult_update: 
 014  20306                 SL0 s3
 015  2040E                 SR0 s4
 016  3400F                 JUMP mult_loop[00F]
 017  2A000                 RETURN
 018                        ;================================================================================
 018                        ;Funcion: read_switches
 018                        ;Entrada: Lee del puerto de entrada los dos numeros pasados.
 018                        ;Salida:
 018                        ; s0: Primer operando. 4 bits.
 018                        ; s1: Segundo operando. 4 bits.
 018                        ;Clobber:
 018                        ; En la lectura se sobrescribe el registro s7
 018                        ;================================================================================
 018                        CONSTANT REG_HIGH, F0
 018                        CONSTANT REG_LOW, 0F
 018                        CONSTANT DUMMY_PORT, 00
 018         read_switches: 
 018  04700                 INPUT s7, DUMMY_PORT[00]
 019  0F000                 XOR s0, s0
 01A  0F110                 XOR s1, s1
 01B  0B070                 AND s0, s7
 01C  0A00F                 AND s0, REG_LOW[0F]
 01D  0B170                 AND s1, s7
 01E  0A1F0                 AND s1, REG_HIGH[F0]
 01F                        ;Mover la parte superior a la baja
 01F                        ;No me quedo otra que shiftear 4 veces
 01F  2010E                 SR0 s1
 020  2010E                 SR0 s1
 021  2010E                 SR0 s1
 022  2010E                 SR0 s1
 023  2A000                 RETURN
 024                        ;================================================================================
 024                        ;Funcion: write_leds
 024                        ;Entrada:
 024                        ; s0: El resultado de la cuenta
 024                        ;Salida: Escribe al puerto de salida el resultado.
 024                        ;================================================================================
 024            write_leds: 
 024  2C000                 OUTPUT s0, DUMMY_PORT[00]
 025  2A000                 RETURN
